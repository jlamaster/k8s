---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
rules:
  # Allow Dashboard to create 'kubernetes-dashboard-key-holder' secret.
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
  # Allow Dashboard to create 'kubernetes-dashboard-settings' config map.
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["create"]
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs"]
  verbs: ["get", "update", "delete"]
  # Allow Dashboard to get and update 'kubernetes-dashboard-settings' config map.
- apiGroups: [""]
  resources: ["configmaps"]
  resourceNames: ["kubernetes-dashboard-settings"]
  verbs: ["get", "update"]
  # Allow Dashboard to get metrics from heapster.
- apiGroups: [""]
  resources: ["services"]
  resourceNames: ["heapster"]
  verbs: ["proxy"]
- apiGroups: [""]
  resources: ["services/proxy"]
  resourceNames: ["heapster", "http:heapster:", "https:heapster:"]
  verbs: ["get"]
---
#To Find out Bearer Token run the following command
#kubectl -n kube-system describe secret kubernetes-dashboard
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
---  
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubernetes-dashboard
subjects:
- kind: ServiceAccount
  name: kubernetes-dashboard
  namespace: kube-system
---
apiVersion: v1
kind: Secret
metadata:
  name: k8s-dashboard-ssl
  namespace: kube-system
type: kubernetes.io/tls
data:
  #cat cert | base64 -w0
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVLekNDQXBPZ0F3SUJBZ0lSQUlkYVNBSjdoN1JabHlXV1FXV09RUFV3RFFZSktvWklodmNOQVFFTEJRQXcKWXpFZU1Cd0dBMVVFQ2hNVmJXdGpaWEowSUdSbGRtVnNiM0J0Wlc1MElFTkJNUnd3R2dZRFZRUUxEQk5xYjI1cQpiMjVBZEdoeVpXRmtjbWx3Y0dWeU1TTXdJUVlEVlFRRERCcHRhMk5sY25RZ2FtOXVhbTl1UUhSb2NtVmhaSEpwCmNIQmxjakFlRncweE9UQXhNVGt4TWpNeU5URmFGdzB5T1RBeE1Ua3hNak15TlRGYU1FY3hKekFsQmdOVkJBb1QKSG0xclkyVnlkQ0JrWlhabGJHOXdiV1Z1ZENCalpYSjBhV1pwWTJGMFpURWNNQm9HQTFVRUN3d1RhbTl1YW05dQpRSFJvY21WaFpISnBjSEJsY2pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBSzBRCjJneUp0UU16TG9ReGVTaFU1NzkrekhVKytqdmV3VDlydjQxYTcvZnV0SG1xc0FLaXZhWjdQa09NeHZqSEQraUkKL3hobE1rTUMzOXBNaTNMMFMzR3lPdVVrb0UrZklycWRlcnFJK0N6aUZxVHVFZlR0YUNvQlpaTGNxM1JTUThtNQpCMVpDS3EzUWRYcFF3cENZQ3Bob1FndEw0THdyK09RNFZBWXBhSU1ZcVdaNGh3V252dWpqODFhdkxBTm94aU13Cm5mb2krSVBwd0ZqTDR1M3Y4U3Y2T3Fqc0xUQmMxamEvU3JlczhJWitpVHZIekh3V2JVREhYVlQ5VnVVQ3pHdU0Kamlzamp4blNkTHFQdnJZb1Q3Y3RURTl2ckNKWlJmR0VLUWpTeVA4WFdiRGZXNVMrOGUxVW03RHFNdi9CajY5bwpmSGdQTEdLUFFrNDNJY1lWMmFFQ0F3RUFBYU4yTUhRd0RnWURWUjBQQVFIL0JBUURBZ1dnTUJNR0ExVWRKUVFNCk1Bb0dDQ3NHQVFVRkJ3TUJNQXdHQTFVZEV3RUIvd1FDTUFBd0h3WURWUjBqQkJnd0ZvQVVIOWM4ZVhtdjZOUUEKSjFjOVZDOU1TLzlYL3Ewd0hnWURWUjBSQkJjd0ZZSVRhemh6TFdSaGMyaGliMkZ5WkM1c2IyTmhiREFOQmdrcQpoa2lHOXcwQkFRc0ZBQU9DQVlFQWxpR2l0eCtvTTZqTjUyb1RubEFSRmlNSGpkZi9BSmpkekFmamlUSFRkNlg4CmhpRVUzU3o3WER4Yjg0MTdjOU1pQ2F6NG5ubzZGbGhwV2lZaEtISWJVWllEUzkrVVoyTitSUEZXcXZPRDM1ankKb09pM1JWZnhGZGo1WnhXbXNzUXF2eStNYWhtZjNrbm5maXFXcFphcVJaS1FOL1Jub0I1NUNxeU1aV1Z6RXRmUwpqck1FL2tpd0NyRHpBMGJEV2ZlT25EeTNPdWdhRnZTTUtkYmdGajN0UGxPYXpDNmJ0MjhSUGhZOEtFNW5ETDFXCjlzWld5N08yYjArZ0QvTHBRc3BhOUwyK3UxTXJaR3JGZUNIckxnc0tDZ1FCcWZMdkliM1pDMlo3NWp3NmgwangKbzBaN0FNOFhiRzZDeTFXb2lRUnhQb21CaXFwZTJzYnp6Zm8yaGE5WFJQbTBJS25xdnNuSHNZTndhVHZTWmZ6WAo2ejZSSEhQVVdoc2szUU1pdFFZM1czZjA1VjRRVHJjQlgxYko0V1FGbytwOE1BMWQ5aGpTdGV1UmNsZUNzWkUzClJoNEh1VVJwbUhMUWczRkIrS0RyaGlYNUlCdEN2QTZuNHdqQk9KaWxVS0wxMUpsTU55ODF6UjV4NmlaSlV6M00KVWRiZU5rTEdGNHh3V3FMQWs2eFAKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=  #cat key | base64 -w0
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRQ3RFTm9NaWJVRE15NkUKTVhrb1ZPZS9mc3gxUHZvNzNzRS9hNytOV3UvMzdyUjVxckFDb3IybWV6NURqTWI0eHcvb2lQOFlaVEpEQXQvYQpUSXR5OUV0eHNqcmxKS0JQbnlLNm5YcTZpUGdzNGhhazdoSDA3V2dxQVdXUzNLdDBVa1BKdVFkV1FpcXQwSFY2ClVNS1FtQXFZYUVJTFMrQzhLL2prT0ZRR0tXaURHS2xtZUljRnA3N280L05Xcnl3RGFNWWpNSjM2SXZpRDZjQlkKeStMdDcvRXIranFvN0Mwd1hOWTJ2MHEzclBDR2Zvazd4OHg4Rm0xQXgxMVUvVmJsQXN4cmpJNHJJNDhaMG5TNgpqNzYyS0UrM0xVeFBiNndpV1VYeGhDa0kwc2ovRjFtdzMxdVV2dkh0Vkp1dzZqTC93WSt2YUh4NER5eGlqMEpPCk55SEdGZG1oQWdNQkFBRUNnZ0VBY2NWUlFzcklWMWt2TERJRnp2QzZCTlpMZkl3eEhtaWFxNkdlcEVOeTI0OXQKejBuWk9YSllzSGYyZjV1dE5lQk80ZlFsbHBqNENMdDhBMXNzbFI1cDlrMVBrRkdhblowa3pIODRMaVphMTg2dApTakZEVnJzM0xkNExNeGVrRXV6OXFUL2N4ZVRyZjZZNWhIWlE0Wk5CNjkwbUJaMFZHVDdpK016YTE4NGk2WUtaCkgzTDJwZXlFY05SQlluK00zdUJYK3hHNFdXVE52WllrcksyS245MHdVQTFzbkdvTEYwc1RGNUNZcUc0SlJhdW4KWFZaY0NKUWpIMWxKbC9YL0kyL3JsSUxTNGNhNTNPSWpNNjF0bVdQdzg0VmlJVGZ6clZJVWtwdGpEdVBvTGtrWQpJRjgxK1Boam1hVGsySnZVQ3AzdVNpUTFNSVg3QjZyMEhpRE5NRHR4M1FLQmdRRFVyZ29wdW4yMGVYY2xXNUwwCi92NXp2bVR0RTJWMXRxYnlLT3hqOHlkYUJRdm9mckZmbVk0NzFFd2RvSUVrMkkzTTJUbDFvUzEwWjdqUEtXK0QKL2dMRWQxbjk4THBSU2tRU3BzTWJHQkFidXM5NlhzeTF2VnNtUm50a2pldVlEVFUvWEZmd2tYZWJWVThYdUFxUgpaMkt5MGNuTEVXcUZCQjhFeFdFOFFrSEZvd0tCZ1FEUVVTNmNwMjVQK1A4WEJBWU1pb21NU2xIZkIwNjlNUk5mCjZvUTVqUGhnQnNySW8wem1RNmpOdUVXMzV1Qk1VR1BCWFV5SkFBdnhUMzJoUGhidmNmcEhjcCthWVNmSHhsNnMKbEZoalNNNDNpdFlXcjRGd0w3clh4WU1ha1FCdE1KbCtzQ2lxSHpXL0doUFlRYmY4K0FzTkZ6Z0gzdTBzUHhVZQo2N1lSdDZtdjZ3S0JnRklhYmVuMkNKa25Xd3VjOG5xS0Jna0FzMDJpYzBTaUlvalJxNUJhU2hMQ1ovcDFEbHh0Cmx5OFpvZGkrSVp6cnpMSU1HZGFEUmx6dHZiYWJ0R1VzSmoxYUplK1dneGJtcUtqYW4rOVJ0c1k5cytMMXZlbGIKRkZrT1ZJeFpEVjVCbXhDK3dXUXBoQmIvTSsxZ0t4USs2U2RIUGJPYklaZ0FJMGxnT1UxZDlxNHBBb0dBRXBoTQppdHMvTTVCTVpPZU5DcTJMSGFTOHJpWGUxM0I4QkVIUXo3cFBxWEt4d3pzZ2NDVjErZmNLOGlGL3dCQWs5MnUyCm16d1AxTmg5cEZrQWZ4c3pkaEU3UWZLT05IejJrbjBqYnFsZkR3SXJuaGJJZlJVbG5vRVk5TlFncjU1NDlTQVEKWVM4c0F3VDI1SVRwUVlGNnF3NTVoK3BVVFhETUY5aCtoaEpZNlVVQ2dZRUFydzJkbW01ejdxRTZtNCtlVFNBWQpQbjVmN3FlRXlxRlN5Z05oZXR3bitOamdBQ2dEbHJzUEdyMkFna3VGbm5HVDZONmdkVXJya0FmS3NhRGNFZkc4CjE2QWJYVmFpL1EwRE13QVpRT2wzSUFDMnRabnhpLzR2RFVFOWpwMEZHK25IREhOaWxOeXhJUU1NMWlueEVmWDYKOGlva2dLd1M0SnRHM20vMGNWUXhaY2M9Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
---
kind: Deployment
apiVersion: apps/v1beta2
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      k8s-app: kubernetes-dashboard
  template:
    metadata:
      labels:
        k8s-app: kubernetes-dashboard
    spec:
      containers:
      - name: kubernetes-dashboard
        image: k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1
        ports:
        - containerPort: 8443
          protocol: TCP
        args:
#          - --enable-insecure-login
#          - --port=8444
#          - --insecure-port=8443
#          - --insecure-bind-address=0.0.0.0
           - --auto-generate-certificates
           - --enable-skip-login=true
#           - --tls-cert-file=
#           - --tls-key-file=
          # Uncomment the following line to manually specify Kubernetes API server Host
          # If not specified, Dashboard will attempt to auto discover the API server and connect
          # to it. Uncomment only if the default does not work.
          # - --apiserver-host=http://my-address:port
        volumeMounts:
          # Create on-disk volume to store exec logs
        - mountPath: /tmp
          name: tmp-volume
        livenessProbe:
          httpGet:
#            scheme: HTTP
            scheme: HTTPS
            path: /
            port: 8443
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: tmp-volume
        emptyDir: {}
      serviceAccountName: kubernetes-dashboard
      # Comment the following tolerations if Dashboard must not be deployed on master
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
---
kind: Service
apiVersion: v1
metadata:
  labels:
    k8s-app: kubernetes-dashboard
  name: kubernetes-dashboard
  namespace: kube-system
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    k8s-app: kubernetes-dashboard
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: kubernetes-dashboard
  namespace: kube-system
  annotations:
    kubernetes.io/ingress.class: traefik
#    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
#    traefik.ingress.kubernetes.io/redirect-entry-point: https
#    traefik.ingress.kubernetes.io/redirect-permanent: "true"
  selfLink: /apis/extensions/v1beta1/namespaces/kube-system/ingresses/kubernetes-dashboard
spec:
  rules:
  - host: k8s-dashboard.local
    http:
      paths:
      - backend:
          serviceName: kubernetes-dashboard
          servicePort: 443
  tls:
  - secretName: k8s-dashboard-ssl
