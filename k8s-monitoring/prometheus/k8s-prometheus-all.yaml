---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: default
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
data:
  prometheus.yaml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
    rule_files:
      - /etc/prometheus/rules/*.yaml
    alerting:
      alertmanagers:
      - scheme: http
        static_configs:
        - targets:
          - "alertmanager.monitoring.svc.cluster.local:9093"

    scrape_configs:
      - job_name: 'prometheus'
          # metrics_path defaults to '/metrics'
          # scheme defaults to 'http'.
        static_configs:
        - targets: ['localhost:9090']

      - job_name: 'traefik'
        static_configs:
        - targets: ['traefik.default.svc.cluster.local:8080']

      - job_name: 'kube-state-metrics'
        static_configs:
        - targets: ['kube-state-metrics.kube-system.svc.cluster.local:8080']

      - job_name: 'kubernetes-apiservers'

        kubernetes_sd_configs:
        - role: endpoints
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      - job_name: 'kubernetes-nodes'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics


      - job_name: 'kubernetes-pods'

        kubernetes_sd_configs:
        - role: pod

        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      - job_name: 'kubernetes-cadvisor'

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
        - role: node

        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

      - job_name: 'kubernetes-service-endpoints'

        kubernetes_sd_configs:
        - role: endpoints

        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
          action: replace
          target_label: __scheme__
          regex: (https?)
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name
metadata:
  name: prometheus-config
  namespace: monitoring
---
apiVersion: v1
kind: ConfigMap
data:
  rules.yaml: |
    groups:
    - name: devopscube demo alert
      rules:
      - alert: High Pod Meory
        expr: sum(container_memory_usage_bytes) > 1
        for: 1m
        labels:
          severity: slack
        annotations:
          summary: High Memory Usage
    - name: DMS
      rules:
      - alert: DeadMansSwitch
        annotations:
          description: This is a DeadMansSwitch meant to ensure that the entire Alerting
            pipeline is functional.
          summary: Alerting DeadMansSwitch
        expr: vector(1)
        labels:
          severity: none
#    - name: etcd
#      rules:
#      - alert: NoLeader
#        expr: etcd_server_has_leader{job="kube-etcd"} == 0
#        for: 1m
#        labels:
#          severity: critical
#          k8s-component: etcd
#        annotations:
#          description: etcd member {{ $labels.instance }} has no leader
#          summary: etcd member has no leader
metadata:
  name: prometheus-rules
  namespace: monitoring
---
#apiVersion: v1
#kind: PersistentVolume
#metadata:
#  name: prometheus-pv-nfs
#  namespace: monitoring
#  labels:
#    type: local
#spec:
#  storageClassName: manual
#  capacity:
#    storage: 15Gi
#  accessModes:
#    - ReadWriteMany
#  nfs:
#    server: 192.168.1.100
#    path: "/media/jonjon/Spare-Drive/k8s"
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: prometheus-pvc-nfs
#  namespace: monitoring
#spec:
#  storageClassName: manual
#  accessModes:
#    - ReadWriteMany
#  resources:
#    requests:
#      storage: 15Gi
   #Rook
#---
#apiVersion: v1
#kind: PersistentVolumeClaim
#metadata:
#  name: mysql-pv-claim
#  namespace: monitoring
#spec:
#  storageClassName: rook-ceph-block
#  accessModes:
#  - ReadWriteOnce
#  resources:
#    requests:
#      storage: 25Gi
#---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: monitoring
spec:
  serviceName: prometheus-service
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        runAsUser: 1000
        fsGroup: 2000
        runAsNonRoot: true
      containers:
      - args:
        - "--storage.tsdb.path=/data"
        - "--storage.tsdb.retention=130d"
        - "--config.file=/etc/prometheus/prometheus.yaml"
        name: prometheus
        image: prom/prometheus
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus/prometheus.yaml
            subPath: prometheus.yaml
          - name: rules-volume
            mountPath: /etc/prometheus/rules/rules.yaml
            subPath: rules.yaml
          - name: prometheus-metrics-db
            mountPath: /data
        ports:
        - containerPort: 9090
      volumes:
        - name: config-volume
          configMap:
           name: prometheus-config
        - name: rules-volume
          configMap:
           name: prometheus-rules
        - name: prometheus-metrics-db
          hostPath: 
            path: /C/Users/P0113789/Documents/hybris-default/kube/data/prometheus
            type: DirectoryOrCreate
    #Rook
#        - name: prometheus-metrics-db
#          persistentVolumeClaim:
#            claimName: mysql-pv-claim
---
#apiVersion: extensions/v1beta1
#kind: Deployment
#metadata:
#  name: prometheus-deployment
#  namespace: monitoring
#spec:
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: prometheus-server
#    spec:
#      containers:
#        - name: prometheus
#          image: prom/prometheus
#          args:
#            - "--config.file=/etc/prometheus/prometheus.yaml"
#            - "--storage.tsdb.path=/prometheus/"
#          ports:
#            - containerPort: 9090
#          volumeMounts:
#            - name: config-volume
#              mountPath: /etc/prometheus/prometheus.yaml
#              subPath: prometheus.yaml
#            - name: rules-volume
#              mountPath: /etc/prometheus/rules/rules.yaml
#              subPath: rules.yaml
#            - name: prometheus-storage-volume
#              mountPath: /prometheus/
#      volumes:
#      - configMap:
#          defaultMode: 420
#          name: prometheus-config
#        name: config-volume
#      - configMap:
#          defaultMode: 420
#          name: prometheus-rules
#        name: rules-volume
#      - name: prometheus-storage-volume
#        emptyDir: {}
#---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: monitoring
  annotations:
      prometheus.io/scrape: 'true'
      prometheus.io/path:   /
      prometheus.io/port:   '8080'
spec:
  ports:
    - name: dashboard
      port: 8080
      protocol: TCP
      targetPort: 9090
  selector:
    app: prometheus
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: traefik
#    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
#    traefik.ingress.kubernetes.io/redirect-entry-point: https
#    traefik.ingress.kubernetes.io/redirect-permanent: "true"
  name: prometheus-dashboard
  namespace: monitoring
spec:
  rules:
  - host: prometheus-dashboard.local
    http:
      paths:
      - backend:
          serviceName: prometheus-service
          servicePort: 8080
#  tls:
#  - secretName: prometheus-dashboard-ssl
